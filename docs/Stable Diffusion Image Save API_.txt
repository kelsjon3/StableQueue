Server-Side Image Saving with the Stable Diffusion WebUI API in Docker
I. Introduction
This report details the methodology for utilizing the Stable Diffusion WebUI Application Programming Interface (API) to generate images and save them directly onto the filesystem of the server hosting the WebUI within a Docker container. The primary objective is to configure the API interaction and Docker environment to ensure generated images are persistently stored on the host server, rather than solely being returned as data within the API response.
The context involves the popular AUTOMATIC1111 Stable Diffusion WebUI 1, a feature-rich interface for Stable Diffusion models often run in isolated Docker containers for ease of deployment and management.2 Leveraging its API allows for automation and integration into custom workflows.3 This guide focuses specifically on the API parameters and Docker configurations required for server-side file saving, bypassing the default behavior of returning image data directly to the API client.
The scope covers enabling the API, understanding the crucial API parameters (save_images, send_images), configuring Docker volume mapping for persistence and host access, and verifying the process. It assumes a basic understanding of Docker concepts and familiarity with making REST API calls, typically using Python.
II. Prerequisites: Setting up the Environment
Before interacting with the API to save images server-side, the Stable Diffusion WebUI environment, running within Docker, must be correctly configured. This involves ensuring Docker is installed, the WebUI container is running, the API is enabled, and appropriate volume mappings are in place.
A. Docker Installation and WebUI Container
A functional Docker installation is required on the server. The Stable Diffusion WebUI should be running inside a Docker container. Various methods exist for running the WebUI in Docker, often involving pulling an image and running it with specific parameters.4 GPU support typically requires additional flags like --gpus all during the docker run command for Nvidia hardware.4
B. Enabling the API (--api Flag)
The Stable Diffusion WebUI's API is not enabled by default. It must be explicitly activated using the --api command-line argument when starting the WebUI process.2 How this flag is added depends on the specific Docker image and its entrypoint configuration:
1. Via webui-user.sh or webui-user.bat: If the container uses the standard startup scripts, modify the COMMANDLINE_ARGS variable within the appropriate script (usually mounted into the container or part of the image build).2
Bash
# Example modification in webui-user.sh
export COMMANDLINE_ARGS="--api --listen --xformers"

2. Via docker run Command: If the container's entrypoint allows passing arguments directly to the WebUI's Python script, add --api to the docker run command. The exact syntax depends on the image's configuration.
Bash
# Example docker run command fragment (syntax varies)
docker run... your-image:tag --api --other-flags

Failure to include the --api flag is a common oversight that prevents the API endpoints, such as /sdapi/v1/txt2img, from being accessible.2 The underlying Gradio application 1 and the WebUI backend require this flag to initialize and expose the REST API service.
Verification: After starting or restarting the container with the --api flag, check the container's logs. Successful API activation is typically indicated by log messages mentioning the API is enabled and providing the URL for the API documentation, usually ending in /docs (e.g., http://127.0.0.1:7860/docs).2
C. Understanding Docker Volumes
Docker volumes are essential for persisting data generated by containers and for sharing data between a container and the host filesystem.4 When the WebUI saves an image via the API, it initially writes the file to the container's own filesystem. Without a volume map, this file would be lost if the container were removed, and it would be inaccessible directly from the host server. Mapping a host directory to the relevant directory inside the container ensures that saved images are written to a location on the host, making them persistent and accessible.4 This is detailed further in Section V.
III. Core API Mechanism: Saving Images Server-Side
The core of saving images directly on the server involves using specific parameters within the API request payload sent to the Stable Diffusion WebUI.
A. Target Endpoint
The primary API endpoint for generating images from text prompts is POST /sdapi/v1/txt2img.2 For image-to-image tasks, the corresponding endpoint is POST /sdapi/v1/img2img. Both endpoints accept a JSON payload containing parameters that control the image generation process.
B. The save_images Parameter
The key parameter to enable server-side saving is save_images.
   * Functionality: This parameter is a boolean value included in the JSON payload sent to the API endpoint.8 Setting "save_images": True explicitly instructs the Stable Diffusion WebUI backend to save the generated image(s) to its configured output directory. This saving action occurs within the context of the container's filesystem.8
   * Default Behavior: If the save_images parameter is omitted from the payload or explicitly set to False, the image generation proceeds, but the resulting image(s) are not automatically saved to the server's filesystem by the API call itself.8 The default behavior is to only return the image data in the response (if send_images is True).
C. API Call Example (Python)
The following Python code demonstrates how to make a POST request to the /sdapi/v1/txt2img endpoint using the requests library, including the crucial save_images: True parameter.


Python




import requests
import json
import base64
import io
# from PIL import Image # Optional: Only needed if processing Base64 response

# Replace with your server's actual IP address or domain name and port
# If running the client script on the same server as the Docker container,
# localhost or 127.0.0.1 might work, otherwise use the server's network IP.
WEBUI_URL = "http://127.0.0.1:7860" # Adjust if necessary
TXT2IMG_ENDPOINT = f"{WEBUI_URL}/sdapi/v1/txt2img"

# Define the image generation parameters in the payload
payload = {
   "prompt": "a futuristic cityscape at sunset, cinematic lighting",
   "steps": 25,
   "cfg_scale": 7,
   "width": 512,
   "height": 512,
   "sampler_name": "DPM++ 2M Karras", # Example sampler, check /docs for available options
   "seed": -1, # -1 for random seed
   "negative_prompt": "blurry, low quality, text, watermark, duplicate",
   "save_images": True, # <<< Crucial parameter for server-side saving
   # Add other valid parameters as needed, consult the /docs endpoint
   # "n_iter": 1, # Number of images to generate in this batch
   # "batch_size": 1, # Number of images to generate simultaneously
}

try:
   # Send the POST request to the txt2img endpoint
   response = requests.post(url=TXT2IMG_ENDPOINT, json=payload)
   response.raise_for_status() # Raise an HTTPError for bad responses (4XX or 5XX)

   # Parse the JSON response
   r = response.json()

   print("API call successful. Image generation initiated and configured to save on the server.")

   # The 'info' field often contains a JSON string with generation parameters,
   # but typically does not include the final saved file path directly. [2, 9]
   if 'info' in r:
        try:
            # The info field itself might be a JSON string that needs parsing
            info_data = json.loads(r['info'])
            print("Generation Info:", json.dumps(info_data, indent=2))
        except json.JSONDecodeError:
            print("Generation Info (raw):", r['info']) # Print raw string if not valid JSON

   # Check if image data was unexpectedly included (if send_images wasn't set to False)
   if 'images' in r and r['images']:
       print(f"Received Base64 image data for {len(r['images'])} image(s).")
       # Optional: Decode and handle the first image if needed for other purposes
       # image_data = base64.b64decode(r['images'])
       # image = Image.open(io.BytesIO(image_data))
       # print("Decoded image size:", image.size)
       # image.show() # Opens the image in a viewer
   else:
       print("No Base64 image data in response (or send_images=False was used).")


except requests.exceptions.RequestException as e:
   print(f"Error making API request: {e}")
   # Potentially add more specific error handling for connection errors, timeouts, etc.
except json.JSONDecodeError:
   print(f"Error decoding JSON response. Status Code: {response.status_code}")
   print(f"Response Text: {response.text}")


Note: Ensure the WEBUI_URL points to the correct address and port where the Stable Diffusion WebUI API is accessible.
D. Server-Side Save Location (Inside Container)
When save_images: True is used, the Stable Diffusion WebUI saves the generated files into its standard output directories, which exist within the Docker container's filesystem. The exact path depends on the WebUI version and configuration, but common default locations include:
   * For text-to-image: /stable-diffusion-webui/outputs/txt2img-images/
   * For image-to-image: /stable-diffusion-webui/outputs/img2img-images/
   * Grids might be saved in /stable-diffusion-webui/outputs/txt2img-grids/ or similar.
Within these directories, images are often further organized into subdirectories based on the date of generation (e.g., YYYY-MM-DD).8
It is important to understand that the API call itself, using save_images: True, triggers the save action, but the specific destination path and filename pattern (which might include seeds, timestamps, etc.) are determined by the WebUI's internal settings. The API client does not typically dictate the exact save path within the container via standard parameters. This separation maintains modularity, as the API client requests an action (saving) without needing detailed knowledge of the server's internal file structure. This contrasts with non-standard extensions observed in some specific cloud platform deployments (like Alibaba Cloud PAI's save_dir parameter 6), which do allow path specification but are not part of the core AUTOMATIC1111 WebUI API.
IV. Optimizing the Response: Suppressing Base64 Data
By default, even when saving the image server-side, the API response includes the generated image(s) encoded as Base64 strings. This can be inefficient if the client application only needs confirmation of the save operation and doesn't require the image data itself.
A. The send_images Parameter
The send_images parameter controls whether the Base64 image data is included in the API response.
   * Functionality: This is a boolean parameter added to the JSON payload.8 Setting "send_images": False instructs the API not to include the images field (containing the Base64 data) in the JSON response it sends back to the client.
   * Default Behavior: The default value for send_images is True. If omitted or set to True, the Base64-encoded image data will be present in the response.8
B. Use Case and Benefits
Setting send_images: False is particularly beneficial when the primary goal is server-side storage (save_images: True) and the client application does not need to process or display the image immediately. The advantages include:
   * Reduced Network Traffic: Base64 encoding significantly increases data size; omitting it reduces the amount of data transferred over the network.
   * Faster Response Time: Less data needs to be serialized by the server and deserialized by the client.
   * Lower Client Memory Usage: The client does not need to hold the potentially large Base64 string(s) in memory.
C. Updated API Call Example (Python)
The following example modifies the previous one to include send_images: False, optimizing the interaction for server-side saving:


Python




import requests
import json

#... (WEBUI_URL and TXT2IMG_ENDPOINT setup as before)...

payload = {
   "prompt": "a detailed portrait of an astronaut on Mars, vibrant colors",
   "steps": 30,
   "cfg_scale": 7.5,
   "width": 768,
   "height": 512,
   "sampler_name": "Euler a",
   "seed": 12345, # Example specific seed
   "negative_prompt": "cartoon, drawing, sketch, simple, minimal",
   "save_images": True,   # Ensure server-side saving is enabled
   "send_images": False,  # <<< Optimization: Prevent Base64 data in response
   #... other parameters...
}

try:
   response = requests.post(url=TXT2IMG_ENDPOINT, json=payload)
   response.raise_for_status()
   r = response.json()

   print("API call successful. Image saved on server. Base64 data was not sent.")

   # Verify that the 'images' key is absent or its value is empty/null
   if 'images' in r and r['images']:
        print("Warning: Received Base64 image data unexpectedly.")
   else:
        print("Successfully suppressed Base64 image data in response.")

   # Process 'info' or other response fields if necessary
   if 'info' in r:
        try:
            info_data = json.loads(r['info'])
            print("Generation Info:", json.dumps(info_data, indent=2))
        except json.JSONDecodeError:
            print("Generation Info (raw):", r['info'])

except requests.exceptions.RequestException as e:
   print(f"Error making API request: {e}")
except json.JSONDecodeError:
   print(f"Error decoding JSON response. Status Code: {response.status_code}")
   print(f"Response Text: {response.text}")


D. Table: Key API Parameters for File Saving
The following table summarizes the two essential parameters for controlling server-side image saving and response content:


Parameter
	Type
	Default
	Description
	Relevant Sources
	save_images
	Boolean
	False
	If True, instructs the WebUI server to save the generated image(s) to its configured output directory.
	8
	send_images
	Boolean
	True
	If False, prevents the API response from including the Base64-encoded image data. Useful with save_images: True.
	8
	This concise reference highlights the parameters directly relevant to achieving the desired server-side saving behavior and optimizing the API communication.
V. Bridging the Gap: Docker Volume Mapping
While the save_images: True API parameter instructs the WebUI inside the container to save the file, accessing that file from the host server requires bridging the gap between the container's isolated filesystem and the host's filesystem using Docker volume mapping.
A. The Necessity of Volume Mapping
Files created inside a Docker container exist within its own layered filesystem. By default, this filesystem is ephemeral; if the container is stopped and removed, its data is lost. Furthermore, files inside the container are not directly accessible from the host operating system.
Docker volume mapping (-v or --volume flag in docker run) creates a link between a directory on the host and a directory inside the container.4 When the WebUI saves an image to the mapped directory inside the container, Docker ensures that the file is actually written to (or mirrored on) the corresponding directory on the host. This provides:
   1. Persistence: Images saved via the API persist on the host even if the container is deleted and recreated.
   2. Accessibility: The saved image files can be directly accessed, read, and processed by other applications or scripts running on the host server.
B. Identifying the Container's Output Path
To set up the volume map correctly, the path where the WebUI saves its output inside the container must be identified. As mentioned previously, this is often /stable-diffusion-webui/outputs/ or a similar path depending on the specific Docker image used. If the WebUI's data directory was customized (e.g., using --data-dir 6), that custom path should be used as the container-side path for mapping. It is advisable to inspect the Docker image documentation or the running container's filesystem if unsure.
Mapping the parent outputs directory is generally recommended over mapping specific subdirectories like outputs/txt2img-images. The WebUI automatically creates dated subfolders and different output type folders (txt2img, img2img, grids, etc.) within the main outputs directory.8 Mapping the parent outputs directory ensures all these generated files and structures are captured on the host with a single mapping rule, making the configuration simpler and more robust.
C. Implementing the Volume Map (docker run)
The volume map is configured when starting the Docker container using the -v or --volume flag. The syntax is -v /path/on/host:/path/in/container.
Here is an example snippet for a docker run command, demonstrating how to map the WebUI's output directory to a directory on the host server:


Bash




# Ensure the host directory exists before running the command:
# mkdir -p /srv/stable-diffusion/outputs
# mkdir -p /srv/stable-diffusion/models # Example for models

docker run -d \
 --gpus all \
 -p 7860:7860 \
 -v /srv/stable-diffusion/outputs:/stable-diffusion-webui/outputs \
 # ^^^ Maps container's '/stable-diffusion-webui/outputs' to host's '/srv/stable-diffusion/outputs' ^^^
 -v /srv/stable-diffusion/models:/stable-diffusion-webui/models \
 # ^^^ Example: Map models directory for persistence and custom models ^^^
 --name my-sd-webui \
 your-stable-diffusion-webui-image:latest \
 --api --listen # Ensure API flag and any other necessary flags are passed

Explanation:
   * /srv/stable-diffusion/outputs: This is an example path on the host server where the generated images will appear. This path must be adjusted based on the desired location on the actual server. Ensure the user running the Docker command has write permissions to this host directory.
   * /stable-diffusion-webui/outputs: This is the assumed path to the output directory inside the container. Verify and adjust this path if the specific Docker image uses a different location.
   * The command also includes examples for mapping the models directory (for persistence) and enabling the API (--api).
VI. Accessing and Verifying Saved Images on the Host
Once the API call with save_images: True is made and the Docker volume mapping is correctly configured, the generated images should be accessible on the host server's filesystem.
A. Locating Files on the Host
To find the saved images, navigate to the host directory specified in the docker run -v command. Using the example from Section V.C, this would be /srv/stable-diffusion/outputs on the host server.
Inside this host directory, the file structure created by the Stable Diffusion WebUI within the container will be mirrored. This typically means finding subdirectories like txt2img-images/ or img2img-images/, which in turn contain date-based folders (e.g., 2024-07-26/) holding the actual image files (.png or .jpg).8
B. Verification
The most straightforward way to verify the entire setup is to:
   1. Ensure the Docker container is running with the correct volume mapping and the --api flag enabled.
   2. Execute an API client script (like the Python examples provided) that sends a request to /sdapi/v1/txt2img with "save_images": True.
   3. After the API call completes successfully, check the mapped directory on the host server (e.g., /srv/stable-diffusion/outputs/txt2img-images/YYYY-MM-DD/).
   4. Confirm that the expected image file has been created in that location.
C. Alternative Access (Optional): /file= Endpoint
The Stable Diffusion WebUI API also provides a /file= endpoint that allows accessing saved files via a URL, provided the file path relative to the WebUI's root directory is known.8 For example:
http://127.0.0.1:7860/file=outputs/txt2img-images/2024-07-26/00001-1234567890.png
While this offers URL-based access, it requires constructing the correct path, which might depend on the WebUI's filename generation settings. For automated server-side workflows that need to process the saved images (e.g., batch processing, analysis, moving files), directly accessing the files via the mapped Docker volume on the host filesystem is generally more efficient and robust. Filesystem access avoids the overhead of HTTP requests within the server and integrates seamlessly with standard file system operations and scripting languages running on the host. The /file= endpoint is often more suitable for scenarios where a web frontend or external service needs a direct URL to display or download the generated asset.
VII. Important Considerations
When working with the Stable Diffusion WebUI API, especially in a server environment, several factors warrant attention.
A. API Documentation (/docs)
The definitive source for the API specification, including all available endpoints, parameters, request/response schemas, and default values for the specific version of the WebUI being run, is the interactive documentation available at the /docs endpoint (e.g., http://127.0.0.1:7860/docs).2 This documentation is typically generated automatically (often using Swagger/OpenAPI via FastAPI 11) from the running application's code.
While online guides and wikis 2 are helpful starting points, they can become outdated as the software evolves.2 Always consult the live /docs endpoint of the running instance to verify parameters like save_images, send_images, sampler names, and other options before implementing API calls. Relying solely on potentially outdated external documentation can lead to errors or missed functionalities.
B. Security Implications
Exposing the Stable Diffusion WebUI and its API, particularly when using flags like --listen (which makes the UI accessible from any network interface, not just localhost) or --share (which creates a public Gradio link), introduces security risks.
   * API Access: If the server is accessible externally, unauthorized users could potentially make API calls, consuming resources. Consider using the --api-auth flag to require basic authentication (username:password) for API requests. Network-level controls, such as firewalls restricting access to port 7860, should also be implemented.
   * Extension Installation: Allowing remote installation of extensions via the UI (enabled by --enable-insecure-extension-access) carries significant security risks, as extensions can execute arbitrary code. This flag should only be used in trusted environments.
While a deep dive into security is beyond the scope of this report, awareness of these implications is crucial when deploying the WebUI API on a server.
VIII. Conclusion
Successfully configuring the Stable Diffusion WebUI API to save generated images directly onto the host server's filesystem involves a combination of API parameter usage and Docker configuration. The process enables automated image generation workflows where the output is persistently stored and readily accessible for subsequent server-side tasks.
The essential steps can be summarized as follows:
   1. Enable API: Start the Stable Diffusion WebUI Docker container ensuring the --api command-line argument is active.
   2. Instruct Server-Side Save: Include the parameter "save_images": True within the JSON payload of API requests sent to the /sdapi/v1/txt2img or /sdapi/v1/img2img endpoints.
   3. Optimize Response (Optional): If the API client does not need the image data returned in the response, include "send_images": False in the payload to reduce network traffic and improve efficiency.
   4. Map Volume: Use the -v host_path:container_output_path flag in the docker run command to map the WebUI's internal output directory (e.g., /stable-diffusion-webui/outputs) to a persistent directory on the host server's filesystem.
   5. Access Files: Locate and utilize the generated image files directly within the mapped directory on the host server.
By correctly implementing these steps, developers can leverage the power of the Stable Diffusion WebUI API for robust, automated image generation pipelines where the output is managed directly on the server infrastructure. Always refer to the instance's /docs endpoint for the most accurate API details.
Works cited
   1. AUTOMATIC1111/stable-diffusion-webui: Stable Diffusion web UI - GitHub, accessed May 12, 2025, https://github.com/AUTOMATIC1111/stable-diffusion-webui
   2. API · AUTOMATIC1111/stable-diffusion-webui Wiki · GitHub, accessed May 12, 2025, https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/API
   3. Guide to using the Automatic1111 API - Random Bits Software Engineering, accessed May 12, 2025, https://randombits.dev/articles/stable-diffusion/api
   4. Quick Start | Open WebUI, accessed May 12, 2025, https://docs.openwebui.com/getting-started/quick-start/
   5. API · AUTOMATIC1111/stable-diffusion-webui Wiki · GitHub, accessed May 12, 2025, https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/API/5a546980e76c41cd9b0dd855926e474ae1ff7e93
   6. Platform For AI:Use Stable Diffusion web UI to deploy an AI painting service - Alibaba Cloud, accessed May 12, 2025, https://www.alibabacloud.com/help/en/pai/user-guide/ai-painting-sdwebui-deployment
   7. lllyasviel/stable-diffusion-webui-forge - GitHub, accessed May 12, 2025, https://github.com/lllyasviel/stable-diffusion-webui-forge
   8. API return image from output directory? · AUTOMATIC1111 stable ..., accessed May 12, 2025, https://github.com/AUTOMATIC1111/stable-diffusion-webui/discussions/14901
   9. How do you make the filename the seed in automatic1111 using the api? : r/StableDiffusion, accessed May 12, 2025, https://www.reddit.com/r/StableDiffusion/comments/1j2awd7/how_do_you_make_the_filename_the_seed_in/
   10. Stable Diffusion WebUI Installation - Documentation & FAQ - HOSTKEY, accessed May 12, 2025, https://hostkey.com/documentation/technical/gpu/stablediffusionwebui/
   11. potetoadmin/stable-diffusion-webui at main - api - Hugging Face, accessed May 12, 2025, https://huggingface.co/potetoadmin/stable-diffusion-webui/blob/main/stable-diffusion-webui/modules/api/api.py
   12. Automatic1111 Stable Diffusion Web API: FAQ - Generative Labs, accessed May 12, 2025, https://www.generativelabs.co/post/automatic1111-stable-diffusion-web-api-overview